mdp

// AEBS Parameters
//const int B1=1000;
//const int B2=2000;
//const int TTCThresh = 10;
//const int xwarning = 2000;
//const int freq = 10;
//const int fmu=1;
//const int Thd=1;

const int B1=40; // approximates high end of comfortable human braking from doc from China (3.4 rounded to 4)
const int B2=80; // Comes from michigan.gov braking test document (8.2 rounded to 8)
const int TTCThresh = 6; // idk
const int xwarning = 1; // point at which human cannot stop car manually, so our system must brake
const int freq = 10; // We pick this, approximates running speed of yolonet
const int fmu=1; // ignoring affects of road conditions on braking for the sake of the case study
const int Thd=2; // In middle of range of driver reaction times (see research gate doc from Finland)

const int initPos;
const int initSpeed;

const int initBrakingFlag;
const int initBraking;


module LECMarkovChain

    s : [0..1] init 1;  // 0 is detect, 1 is misdetect

    carSpeed : [0 .. initSpeed] init initSpeed;
    carPos : [0..initPos] init initPos;

    seqflag : [0..2] init initBrakingFlag;         
    contRegion : [0..2] init 0;

    //TTC = carPos/carSpeed;
    //xwarning = (carPos-fmu*pow(carSpeed,2)/(2*B2))/(carSpeed*Thd)
    // compute controller region
    [] seqflag=0&((carPos-50)/carSpeed)>TTCThresh&((carPos-50)-fmu*pow(carSpeed,2)/(2*B2))/(carSpeed*Thd)>xwarning ->   (seqflag'=1)&(contRegion'=0); // safe region
    [] seqflag=0&((carPos-50)/carSpeed)>TTCThresh&((carPos-50)-fmu*pow(carSpeed,2)/(2*B2))/(carSpeed*Thd)<=xwarning ->  (seqflag'=1)&(contRegion'=1); // braking region
    [] seqflag=0&((carPos-50)/carSpeed)<=TTCThresh&((carPos-50)-fmu*pow(carSpeed,2)/(2*B2))/(carSpeed*Thd)>xwarning ->  (seqflag'=1)&(contRegion'=1); // braking region
    [] seqflag=0&((carPos-50)/carSpeed)<=TTCThresh&((carPos-50)-fmu*pow(carSpeed,2)/(2*B2))/(carSpeed*Thd)<=xwarning -> (seqflag'=1)&(contRegion'=2); // collision mitigation region

    // compute LEC reading
    [] seqflag=1&carPos<100&carPos>=0 -> 0.962979:(s'=0)&(seqflag'=2)+ (1-0.962979):(s'=1)&(seqflag'=2);
    [] seqflag=1&carPos<200&carPos>=100 -> 0.990166:(s'=0)&(seqflag'=2)+ (1-0.990166):(s'=1)&(seqflag'=2);
    [] seqflag=1&carPos<300&carPos>=200 -> 0.914615:(s'=0)&(seqflag'=2)+ (1-0.914615):(s'=1)&(seqflag'=2);
    [] seqflag=1&carPos<400&carPos>=300 -> 0.891092:(s'=0)&(seqflag'=2)+ (1-0.891092):(s'=1)&(seqflag'=2);
    [] seqflag=1&carPos<500&carPos>=400 -> 0.844562:(s'=0)&(seqflag'=2)+ (1-0.844562):(s'=1)&(seqflag'=2);
    [] seqflag=1&carPos<600&carPos>=500 -> 0.801321:(s'=0)&(seqflag'=2)+ (1-0.801321):(s'=1)&(seqflag'=2);
    [] seqflag=1&carPos<700&carPos>=600 -> 0.642089:(s'=0)&(seqflag'=2)+ (1-0.642089):(s'=1)&(seqflag'=2);
    [] seqflag=1&carPos<800&carPos>=700 -> 0.544463:(s'=0)&(seqflag'=2)+ (1-0.544463):(s'=1)&(seqflag'=2);
    [] seqflag=1&carPos<900&carPos>=800 -> 0.161903:(s'=0)&(seqflag'=2)+ (1-0.161903):(s'=1)&(seqflag'=2);
    [] seqflag=1&carPos<1000&carPos>=900 -> 0.0109642:(s'=0)&(seqflag'=2)+ (1-0.0109642):(s'=1)&(seqflag'=2);
    [] seqflag=1&carPos<1100&carPos>=1000 -> 0.00444358:(s'=0)&(seqflag'=2)+ (1-0.00444358):(s'=1)&(seqflag'=2);
    [] seqflag=1&carPos<1200&carPos>=1100 -> 0.0000304324:(s'=0)&(seqflag'=2)+ (1-0.0000304324):(s'=1)&(seqflag'=2);
    [] seqflag=1&carPos<1300&carPos>=1200 -> 0.0:(s'=0)&(seqflag'=2)+ 1.0:(s'=1)&(seqflag'=2);
    [] seqflag=1&carPos<1400&carPos>=1300 -> 0.0:(s'=0)&(seqflag'=2)+ 1.0:(s'=1)&(seqflag'=2);
    [] seqflag=1&carPos<1500&carPos>=1400 -> 0.0:(s'=0)&(seqflag'=2)+ 1.0:(s'=1)&(seqflag'=2);
    [] seqflag=1&carPos<1600&carPos>=1500 -> 0.0:(s'=0)&(seqflag'=2)+ 1.0:(s'=1)&(seqflag'=2);
    [] seqflag=1&carPos<1700&carPos>=1600 -> 0.0:(s'=0)&(seqflag'=2)+ 1.0:(s'=1)&(seqflag'=2);
    [] seqflag=1&carPos<1800&carPos>=1700 -> 0.0:(s'=0)&(seqflag'=2)+ 1.0:(s'=1)&(seqflag'=2);
    [] seqflag=1&carPos<1900&carPos>=1800 -> 0.0:(s'=0)&(seqflag'=2)+ 1.0:(s'=1)&(seqflag'=2);
    [] seqflag=1&carPos<2000&carPos>=1900 -> 0.0:(s'=0)&(seqflag'=2)+ 1.0:(s'=1)&(seqflag'=2);

	//[] seqflag=1 -> 0.35:(s'=0)&(seqflag'=2) + 0.65:(s'=1)&(seqflag'=2);

	
    // compute carPos, carSpeed
    [] seqflag=2&s=0&contRegion=0&carSpeed>0&carPos>0 -> (carPos'=max(0,carPos-ceil(carSpeed/freq)))&(seqflag'=0);
    [] seqflag=2&s=0&contRegion=1&carSpeed>0&carPos>0 -> (carPos'=max(0,carPos-ceil(carSpeed/freq)))&(carSpeed'=max(0,carSpeed-floor(B1/freq)))&(seqflag'=0);
    [] seqflag=2&s=0&contRegion=2&carSpeed>0&carPos>0 -> (carPos'=max(0,carPos-ceil(carSpeed/freq)))&(carSpeed'=max(0,carSpeed-floor(B2/freq)))&(seqflag'=0);
    [] seqflag=2&s=1&contRegion=0&carSpeed>0&carPos>0 -> (carPos'=max(0,carPos-ceil(carSpeed/freq)))&(seqflag'=0);
    [] seqflag=2&s=1&contRegion=1&carSpeed>0&carPos>0 -> (carPos'=max(0,carPos-ceil(carSpeed/freq)))&(seqflag'=0);
    [] seqflag=2&s=1&contRegion=2&carSpeed>0&carPos>0 -> (carPos'=max(0,carPos-ceil(carSpeed/freq)))&(seqflag'=0);

endmodule