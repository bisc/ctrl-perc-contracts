mdp

 
const int wlInit1;
const int initContAction1;
const int wlInit2;
const int initContAction2;
const int wlMax=101;
const int maxTime=25;
const int maxNumSteps=25;

const int inflow = 13;
const int outflow = 4;
 
module PRISMLattice

    wl1 : [0..wlMax] init wlInit1;
    contAction1 : [0..1] init initContAction1;
	numSteps1 : [0..maxNumSteps] init 0;

    wl2 : [0..wlMax] init wlInit2;
    contAction2 : [0..1] init initContAction2;
	numSteps2 : [0..maxNumSteps] init 0;

    currN : [0..2] init 0;
    tankFlag : [1..3] init 1;
    sink: [0..1] init 0;
    timesteps: [0..maxTime] init 0;

	// Run LEC Models for each tank
	// set numSteps, contAction for each tank
    [] currN=0&tankFlag=1&wl1= -> 0.5:(contAction1'=1)&(numSteps1=3)&(tankFlag'=2) + 
	[] currN=0&tankFlag=2&wl2= ->
 
	// resolve control conflicts
	[] currN=1&contAction1=1&(timesteps+numSteps1<=maxTime) -> (contAction2'=0)&(numSteps2'=numSteps1)&(currN'=2);
	[] currN=1&contAction1=0&contAction2=1&(timesteps+numSteps1<=maxTime) -> (numSteps1'=numSteps2)&(currN'=2);
	[] currN=1&contAction1=0&contAction2=0&(timesteps+numSteps1<=maxTime) -> (currN'=2);
	
	// simulate tank dynamics
	[] currN=2&tankFlag=1&(timesteps+numSteps1<=maxTime) -> (wl1'=wl1-numSteps1*outflow+contAction1*numSteps1*inflow)&(currN'=2)&(tankFlag'=2);
	[] currN=2&tankFlag=2&(timesteps+numSteps1<=maxTime) -> (wl2'=wl2-numSteps2*outflow+contAction2*numSteps2*inflow)&(timesteps'=timesteps+numSteps2)&(currN'=0)&(tankFlag'=1);

	[] wl1>=wlMax -> (sink'=1);
	[] wl2>=wlMax -> (sink'=1);
	[] timesteps+numSteps1>maxTime -> 
	
 
endmodule
