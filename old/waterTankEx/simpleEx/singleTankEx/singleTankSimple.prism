mdp


 
const int wlInit;

const int wlContLowThresh = 25;
const int wlContUpThresh = 25;

const double p0=0.1;
const double p1=0.1;
const double p2=0.2;
const double p3=0.2;
const double p4=0.2;
const double p5=0.2;

const int maxTime = 100;

module LECMarkovChain

    wl : [-10..60] init wlInit;
    wlPer : [-10..60] init wlInit;
    inflow : [0..4] init 0;
    outflow : [0..5] init 0;
    contAction : [0..4] init 0;
    seqflag : [-1..3] init 0;

    sink : [0..1] init 0;

    timesteps : [0..maxTime] init 0;

    // Pick perception output
    //[] seqflag=-1 -> 0.5*0.025:(wlPer'=wl-3)&(seqflag'=0) + 0.5*0.075:(wlPer'=wl-2)&(seqflag'=0) + 0.5*0.15:(wlPer'=wl-1)&(seqflag'=0) + 0.5*0.5:(wlPer'=wl-0)&(seqflag'=0) + 0.5*0.15:(wlPer'=wl+1)&(seqflag'=0) + 0.5*0.075:(wlPer'=wl+2)&(seqflag'=0) + 0.5*0.025:(wlPer'=wl+3)&(seqflag'=0) + 0.5:(wlPer'=50)&(seqflag'=0);
    [] seqflag=-1 -> 0.5:(wlPer'=0)&(seqflag'=0) + 0.5:(wlPer'=50)&(seqflag'=0);

    // Pick control contAction
    //[] seqflag=0&contAction=0&wlPer<wlContLowThresh&sink=0 -> (seqflag'=1)&(contAction'=8);
    //[] seqflag=0&contAction!=0&wlPer<wlContUpThresh&sink=0 -> (seqflag'=1)&(contAction'=8);
    //[] seqflag=0&contAction=0&wlPer>=wlContLowThresh&sink=0 -> (seqflag'=1)&(contAction'=0);
    //[] seqflag=0&wlPer>=wlContUpThresh&sink=0 -> (seqflag'=1)&(contAction'=0);

    [] seqflag=0&wlPer<wlContLowThresh&sink=0 -> (seqflag'=1)&(contAction'=4);
    [] seqflag=0&wlPer>=wlContLowThresh&sink=0 -> (seqflag'=1)&(contAction'=0);


    // Determine inflow from control action
    [] seqflag=1&sink=0 -> (seqflag'=2)&(inflow'=contAction);

    // Pick outflow
    //[] seqflag=2&sink=0 -> p0:(seqflag'=3)&(outflow'=0) + p1:(seqflag'=3)&(outflow'=1) + p2:(seqflag'=3)&(outflow'=2) + p3:(seqflag'=3)&(outflow'=3) + p4:(seqflag'=3)&(outflow'=4) + p5:(seqflag'=3)&(outflow'=5);
    [] seqflag=2&sink=0 -> (seqflag'=3)&(outflow'=2);

    // update water level
    [] seqflag=3&wl>0&wl<50&sink=0&(timesteps<maxTime) -> (seqflag'=-1)&(wl'=wl-outflow+inflow)&(timesteps'=timesteps+1);
    [] seqflag=3&wl<=0&sink=0 -> (sink'=1);
    [] seqflag=3&wl>=50&sink=0 -> (sink'=1);

endmodule